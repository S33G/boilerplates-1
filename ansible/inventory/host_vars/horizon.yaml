---
media_path: /mnt/media
container_path: /data
docker_sock: /var/run/docker.sock:/var/run/docker.sock:ro
docker_network:
    - misc

common_env: &common_env
  TZ: America/New_York
  PUID: "1000"
  PGID: "1000"

service_definitions:
  - name: photoprism
    image: photoprism/photoprism:latest
    links: [photoprism-db]
    security_opts:
      - seccomp:unconfined
      - apparmor:unconfined
    privileged: "true"
    ports:
      - "2342:2342"
    env:
      <<: *common_env
      PHOTOPRISM_ADMIN_USER: "admin"                 # admin login username
      PHOTOPRISM_ADMIN_PASSWORD: "insecure"          # initial admin password (8-72 characters)
      PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
      PHOTOPRISM_SITE_URL: "https://photos.local.chkpwd.com/"  # server URL in the format "http(s)://domain.name(:port)/(path)"
      PHOTOPRISM_ORIGINALS_LIMIT: "5000"               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW images
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: "85"                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "photoprism-db:3306"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: "insecure"       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: "Chk's PhotoApp"                # meta site description
      PHOTOPRISM_SITE_AUTHOR: "chkpwd"                     # meta site author
    working_dir: "/photoprism"
    volumes:
      - "{{ configuration_path }}/photoprism/originals:/photoprism/originals"    # original media files (photos and videos)
      - "{{ configuration_path }}/photoprism/import:/photoprism/import"          # *optional* folder from which files can be imported to originals
      - "{{ configuration_path }}/photoprism:/photoprism/storage"        # *writable* storage folder for cache, database, and sidecar files (never remove)

  - name: photoprism-db
    image: mariadb:10.11
    privileged: "true"
    security_opts:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --innodb-buffer-pool-size=2G --lower-case-table-names=1 --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=180
    env:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_DATABASE: "photoprism"
      MARIADB_USER: "photoprism"
      MARIADB_PASSWORD: "insecure"
      MARIADB_ROOT_PASSWORD: "insecure"
    volumes:
      - "{{ configuration_path }}/photoprism/db:/var/lib/mysql"

  - name: semaphore
    image: semaphoreui/semaphore:v2.8.90
    ports: [3002:3000]
    env:
      <<: *common_env
      SEMAPHORE_DB_DIALECT: bolt
      SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore/
      SEMAPHORE_ADMIN_NAME: admin
      SEMAPHORE_ADMIN_PASSWORD: "{{ SEMAPHORE_UI_PASSWORD }}"
      SEMAPHORE_ADMIN_EMAIL: "{{ GMAIL_ADDR }}"
      SEMAPHORE_ADMIN: admin
      SEMAPHORE_ACCESS_KEY_ENCRYPTION: "{{ SEMAPHORE_ACCESS_KEY }}"
      ANSIBLE_HOST_KEY_CHECKING: "false"
    volumes:
      - "{{ configuration_path }}/semaphore/clients.yaml:/inventory:ro"
      - "{{ configuration_path }}/semaphore/authorized-keys:/authorized-keys:ro"
      - "{{ configuration_path }}/semaphore:/etc/semaphore:rw"
      - "{{ configuration_path }}/semaphore/database.boltdb:/var/lib/semaphore/database.boltdb"

  - name: zipline-postgres
    image: postgres:15
    env:
      <<: *common_env
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: postgres
    volumes:
      - "{{ configuration_path }}/zipline/db:/var/lib/postgresql/data"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: "5"

  - name: zipline
    image: ghcr.io/diced/zipline
    ports: [3001:3000]
    env:
      CORE_SECRET: "$6$LE8KUBB6EM9Gkg9w$sSNd6YCtugFUq62xN/VqrW4gPLDGvG0DzDLqZVqsWkT2CD4pPxB3mnqX1sPGm3OSY.Xwdk3I4EoreRXXCvkgS0"
      CORE_HOST: "0.0.0.0"
      CORE_RETURN_HTTPS: "true"
      CORE_PORT: "3000"
      CORE_DATABASE_URL: "postgres://postgres:postgres@zipline-postgres/postgres"
      CORE_LOGGER: "true"
      WEBSITE_TITLE: "Chkpwd's File Server"
      UPLOADER_DEFAULT_FORMAT: 'NAME'
      MFA_TOTP_ENABLED: "true"
    volumes:
      - "{{ configuration_path }}/zipline/uploads:/zipline/uploads"
      - "{{ configuration_path }}/zipline/public:/zipline/public"
    links: [zipline-postgres]

  - name: couchdb
    image: couchdb:latest
    env:
      <<: *common_env
      COUCHDB_USER: admin
      COUCHDB_PASSWORD: "{{ COUCHDB_DB_PASSWORD }}"
    ports:
      - '5984:5984'
    volumes:
      - "{{ configuration_path }}/couchdb:/opt/couchdb/data"
      - "{{ configuration_path }}/couchdb/local.ini:/opt/couchdb/etc/local.ini"

  - name: winxuu
    image: chkpwd/winxuu:latest
    ports: [3389:3389]

  - name: syncthing
    image: lscr.io/linuxserver/syncthing:latest
    env: "{{ common_env }}"
    volumes:
      - "{{ configuration_path }}/syncthing:/config"
      - "{{ configuration_path }}/syncthing/data:/data"
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp

  - name: bitwardenrs
    image: "vaultwarden/server:latest"
    ports: [8086:80]
    env: "{{ common_env }}"
    volumes:
      - "{{ configuration_path }}/bitwardenrs:/data"

  - name: swag
    image: "{{ linuxserver_image }}/swag:latest"
    ports:
      - 443:443
      - 80:80
    env:
      <<: *common_env
      URL: chkpwd.com
      SUBDOMAINS: wildcard
      VALIDATION: dns
      DNSPLUGIN: cloudflare
      EMAIL: mentality@protonmail.com
      STAGING: "false"
      DOCKER_MODS: linuxserver/mods:swag-auto-reload
    volumes:
      - "{{ configuration_path }}/swag:/config"

  - name: unifi
    image: "lumel/unifi-controller"
    ports:
      - '3478:3478/udp'
      - '10001:10001/udp'
      - '8080:8080'
      - '8085:8081'
      - '8443:8443'
      - '8843:8843'
      - '8880:8880'
      - '6789:6789'
    env: "{{ common_env }}"
    volumes:
      - "{{ configuration_path }}/unifi:/usr/lib/unifi/data"

  - name: homepage
    image: ghcr.io/benphelps/homepage:latest
    ports: [3000:3000]
    env: "{{ common_env }}"
    volumes:
      - "{{ configuration_path }}/homepage:/app/config"
      - "{{ docker_sock }}"

  - name: freshrss
    image: "{{ linuxserver_image }}/freshrss:latest"
    env: "{{ common_env }}"
    ports: [8087:80]
    volumes:
      - "{{ configuration_path }}/freshrss:/config"

  - name: kavita
    image: kizaing/kavita:latest
    volumes:
      - "{{ configuration_path }}/kavita:/kavita/config"
      - "{{ configuration_path }}/kavita/data:/books"
    env:
      <<: *common_env
    ports: [8083:5000]

  - name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_NOTIFICATION_TITLE_TAG: "Horizon"
      WATCHTOWER_SCHEDULE: "0 7 */10 * *"
      WATCHTOWER_NOTIFICATION_URL: "{{ DISCORD_TOKEN }}"
      WATCHTOWER_MONITOR_ONLY: "false"
      WATCHTOWER_NOTIFICATIONS: "shoutrrr"
